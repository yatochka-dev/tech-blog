
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ConfigEntry` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ConfigEntry
 * 
 */
export type ConfigEntryModel = runtime.Types.Result.DefaultSelection<Prisma.$ConfigEntryPayload>

export type AggregateConfigEntry = {
  _count: ConfigEntryCountAggregateOutputType | null
  _min: ConfigEntryMinAggregateOutputType | null
  _max: ConfigEntryMaxAggregateOutputType | null
}

export type ConfigEntryMinAggregateOutputType = {
  id: string | null
  key: string | null
  value: string | null
  type: $Enums.ConfigValueType | null
}

export type ConfigEntryMaxAggregateOutputType = {
  id: string | null
  key: string | null
  value: string | null
  type: $Enums.ConfigValueType | null
}

export type ConfigEntryCountAggregateOutputType = {
  id: number
  key: number
  value: number
  type: number
  _all: number
}


export type ConfigEntryMinAggregateInputType = {
  id?: true
  key?: true
  value?: true
  type?: true
}

export type ConfigEntryMaxAggregateInputType = {
  id?: true
  key?: true
  value?: true
  type?: true
}

export type ConfigEntryCountAggregateInputType = {
  id?: true
  key?: true
  value?: true
  type?: true
  _all?: true
}

export type ConfigEntryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConfigEntry to aggregate.
   */
  where?: Prisma.ConfigEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigEntries to fetch.
   */
  orderBy?: Prisma.ConfigEntryOrderByWithRelationInput | Prisma.ConfigEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ConfigEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ConfigEntries
  **/
  _count?: true | ConfigEntryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ConfigEntryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ConfigEntryMaxAggregateInputType
}

export type GetConfigEntryAggregateType<T extends ConfigEntryAggregateArgs> = {
      [P in keyof T & keyof AggregateConfigEntry]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateConfigEntry[P]>
    : Prisma.GetScalarType<T[P], AggregateConfigEntry[P]>
}




export type ConfigEntryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ConfigEntryWhereInput
  orderBy?: Prisma.ConfigEntryOrderByWithAggregationInput | Prisma.ConfigEntryOrderByWithAggregationInput[]
  by: Prisma.ConfigEntryScalarFieldEnum[] | Prisma.ConfigEntryScalarFieldEnum
  having?: Prisma.ConfigEntryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ConfigEntryCountAggregateInputType | true
  _min?: ConfigEntryMinAggregateInputType
  _max?: ConfigEntryMaxAggregateInputType
}

export type ConfigEntryGroupByOutputType = {
  id: string
  key: string
  value: string
  type: $Enums.ConfigValueType
  _count: ConfigEntryCountAggregateOutputType | null
  _min: ConfigEntryMinAggregateOutputType | null
  _max: ConfigEntryMaxAggregateOutputType | null
}

type GetConfigEntryGroupByPayload<T extends ConfigEntryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ConfigEntryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ConfigEntryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ConfigEntryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ConfigEntryGroupByOutputType[P]>
      }
    >
  > 



export type ConfigEntryWhereInput = {
  AND?: Prisma.ConfigEntryWhereInput | Prisma.ConfigEntryWhereInput[]
  OR?: Prisma.ConfigEntryWhereInput[]
  NOT?: Prisma.ConfigEntryWhereInput | Prisma.ConfigEntryWhereInput[]
  id?: Prisma.StringFilter<"ConfigEntry"> | string
  key?: Prisma.StringFilter<"ConfigEntry"> | string
  value?: Prisma.StringFilter<"ConfigEntry"> | string
  type?: Prisma.EnumConfigValueTypeFilter<"ConfigEntry"> | $Enums.ConfigValueType
}

export type ConfigEntryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type ConfigEntryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  key?: string
  AND?: Prisma.ConfigEntryWhereInput | Prisma.ConfigEntryWhereInput[]
  OR?: Prisma.ConfigEntryWhereInput[]
  NOT?: Prisma.ConfigEntryWhereInput | Prisma.ConfigEntryWhereInput[]
  value?: Prisma.StringFilter<"ConfigEntry"> | string
  type?: Prisma.EnumConfigValueTypeFilter<"ConfigEntry"> | $Enums.ConfigValueType
}, "id" | "key">

export type ConfigEntryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
  _count?: Prisma.ConfigEntryCountOrderByAggregateInput
  _max?: Prisma.ConfigEntryMaxOrderByAggregateInput
  _min?: Prisma.ConfigEntryMinOrderByAggregateInput
}

export type ConfigEntryScalarWhereWithAggregatesInput = {
  AND?: Prisma.ConfigEntryScalarWhereWithAggregatesInput | Prisma.ConfigEntryScalarWhereWithAggregatesInput[]
  OR?: Prisma.ConfigEntryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ConfigEntryScalarWhereWithAggregatesInput | Prisma.ConfigEntryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ConfigEntry"> | string
  key?: Prisma.StringWithAggregatesFilter<"ConfigEntry"> | string
  value?: Prisma.StringWithAggregatesFilter<"ConfigEntry"> | string
  type?: Prisma.EnumConfigValueTypeWithAggregatesFilter<"ConfigEntry"> | $Enums.ConfigValueType
}

export type ConfigEntryCreateInput = {
  id?: string
  key: string
  value: string
  type: $Enums.ConfigValueType
}

export type ConfigEntryUncheckedCreateInput = {
  id?: string
  key: string
  value: string
  type: $Enums.ConfigValueType
}

export type ConfigEntryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumConfigValueTypeFieldUpdateOperationsInput | $Enums.ConfigValueType
}

export type ConfigEntryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumConfigValueTypeFieldUpdateOperationsInput | $Enums.ConfigValueType
}

export type ConfigEntryCreateManyInput = {
  id?: string
  key: string
  value: string
  type: $Enums.ConfigValueType
}

export type ConfigEntryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumConfigValueTypeFieldUpdateOperationsInput | $Enums.ConfigValueType
}

export type ConfigEntryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  key?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.EnumConfigValueTypeFieldUpdateOperationsInput | $Enums.ConfigValueType
}

export type ConfigEntryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type ConfigEntryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type ConfigEntryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  key?: Prisma.SortOrder
  value?: Prisma.SortOrder
  type?: Prisma.SortOrder
}

export type EnumConfigValueTypeFieldUpdateOperationsInput = {
  set?: $Enums.ConfigValueType
}



export type ConfigEntrySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
}, ExtArgs["result"]["configEntry"]>

export type ConfigEntrySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
}, ExtArgs["result"]["configEntry"]>

export type ConfigEntrySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
}, ExtArgs["result"]["configEntry"]>

export type ConfigEntrySelectScalar = {
  id?: boolean
  key?: boolean
  value?: boolean
  type?: boolean
}

export type ConfigEntryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "key" | "value" | "type", ExtArgs["result"]["configEntry"]>

export type $ConfigEntryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ConfigEntry"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    key: string
    value: string
    type: $Enums.ConfigValueType
  }, ExtArgs["result"]["configEntry"]>
  composites: {}
}

export type ConfigEntryGetPayload<S extends boolean | null | undefined | ConfigEntryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload, S>

export type ConfigEntryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ConfigEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ConfigEntryCountAggregateInputType | true
  }

export interface ConfigEntryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ConfigEntry'], meta: { name: 'ConfigEntry' } }
  /**
   * Find zero or one ConfigEntry that matches the filter.
   * @param {ConfigEntryFindUniqueArgs} args - Arguments to find a ConfigEntry
   * @example
   * // Get one ConfigEntry
   * const configEntry = await prisma.configEntry.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ConfigEntryFindUniqueArgs>(args: Prisma.SelectSubset<T, ConfigEntryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ConfigEntry that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ConfigEntryFindUniqueOrThrowArgs} args - Arguments to find a ConfigEntry
   * @example
   * // Get one ConfigEntry
   * const configEntry = await prisma.configEntry.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ConfigEntryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ConfigEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConfigEntry that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigEntryFindFirstArgs} args - Arguments to find a ConfigEntry
   * @example
   * // Get one ConfigEntry
   * const configEntry = await prisma.configEntry.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ConfigEntryFindFirstArgs>(args?: Prisma.SelectSubset<T, ConfigEntryFindFirstArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ConfigEntry that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigEntryFindFirstOrThrowArgs} args - Arguments to find a ConfigEntry
   * @example
   * // Get one ConfigEntry
   * const configEntry = await prisma.configEntry.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ConfigEntryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ConfigEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ConfigEntries that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigEntryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ConfigEntries
   * const configEntries = await prisma.configEntry.findMany()
   * 
   * // Get first 10 ConfigEntries
   * const configEntries = await prisma.configEntry.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const configEntryWithIdOnly = await prisma.configEntry.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ConfigEntryFindManyArgs>(args?: Prisma.SelectSubset<T, ConfigEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ConfigEntry.
   * @param {ConfigEntryCreateArgs} args - Arguments to create a ConfigEntry.
   * @example
   * // Create one ConfigEntry
   * const ConfigEntry = await prisma.configEntry.create({
   *   data: {
   *     // ... data to create a ConfigEntry
   *   }
   * })
   * 
   */
  create<T extends ConfigEntryCreateArgs>(args: Prisma.SelectSubset<T, ConfigEntryCreateArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ConfigEntries.
   * @param {ConfigEntryCreateManyArgs} args - Arguments to create many ConfigEntries.
   * @example
   * // Create many ConfigEntries
   * const configEntry = await prisma.configEntry.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ConfigEntryCreateManyArgs>(args?: Prisma.SelectSubset<T, ConfigEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ConfigEntries and returns the data saved in the database.
   * @param {ConfigEntryCreateManyAndReturnArgs} args - Arguments to create many ConfigEntries.
   * @example
   * // Create many ConfigEntries
   * const configEntry = await prisma.configEntry.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ConfigEntries and only return the `id`
   * const configEntryWithIdOnly = await prisma.configEntry.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ConfigEntryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ConfigEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ConfigEntry.
   * @param {ConfigEntryDeleteArgs} args - Arguments to delete one ConfigEntry.
   * @example
   * // Delete one ConfigEntry
   * const ConfigEntry = await prisma.configEntry.delete({
   *   where: {
   *     // ... filter to delete one ConfigEntry
   *   }
   * })
   * 
   */
  delete<T extends ConfigEntryDeleteArgs>(args: Prisma.SelectSubset<T, ConfigEntryDeleteArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ConfigEntry.
   * @param {ConfigEntryUpdateArgs} args - Arguments to update one ConfigEntry.
   * @example
   * // Update one ConfigEntry
   * const configEntry = await prisma.configEntry.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ConfigEntryUpdateArgs>(args: Prisma.SelectSubset<T, ConfigEntryUpdateArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ConfigEntries.
   * @param {ConfigEntryDeleteManyArgs} args - Arguments to filter ConfigEntries to delete.
   * @example
   * // Delete a few ConfigEntries
   * const { count } = await prisma.configEntry.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ConfigEntryDeleteManyArgs>(args?: Prisma.SelectSubset<T, ConfigEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConfigEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigEntryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ConfigEntries
   * const configEntry = await prisma.configEntry.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ConfigEntryUpdateManyArgs>(args: Prisma.SelectSubset<T, ConfigEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ConfigEntries and returns the data updated in the database.
   * @param {ConfigEntryUpdateManyAndReturnArgs} args - Arguments to update many ConfigEntries.
   * @example
   * // Update many ConfigEntries
   * const configEntry = await prisma.configEntry.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ConfigEntries and only return the `id`
   * const configEntryWithIdOnly = await prisma.configEntry.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ConfigEntryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ConfigEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ConfigEntry.
   * @param {ConfigEntryUpsertArgs} args - Arguments to update or create a ConfigEntry.
   * @example
   * // Update or create a ConfigEntry
   * const configEntry = await prisma.configEntry.upsert({
   *   create: {
   *     // ... data to create a ConfigEntry
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ConfigEntry we want to update
   *   }
   * })
   */
  upsert<T extends ConfigEntryUpsertArgs>(args: Prisma.SelectSubset<T, ConfigEntryUpsertArgs<ExtArgs>>): Prisma.Prisma__ConfigEntryClient<runtime.Types.Result.GetResult<Prisma.$ConfigEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ConfigEntries.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigEntryCountArgs} args - Arguments to filter ConfigEntries to count.
   * @example
   * // Count the number of ConfigEntries
   * const count = await prisma.configEntry.count({
   *   where: {
   *     // ... the filter for the ConfigEntries we want to count
   *   }
   * })
  **/
  count<T extends ConfigEntryCountArgs>(
    args?: Prisma.Subset<T, ConfigEntryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ConfigEntryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ConfigEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ConfigEntryAggregateArgs>(args: Prisma.Subset<T, ConfigEntryAggregateArgs>): Prisma.PrismaPromise<GetConfigEntryAggregateType<T>>

  /**
   * Group by ConfigEntry.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ConfigEntryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ConfigEntryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ConfigEntryGroupByArgs['orderBy'] }
      : { orderBy?: ConfigEntryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ConfigEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ConfigEntry model
 */
readonly fields: ConfigEntryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ConfigEntry.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ConfigEntryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ConfigEntry model
 */
export interface ConfigEntryFieldRefs {
  readonly id: Prisma.FieldRef<"ConfigEntry", 'String'>
  readonly key: Prisma.FieldRef<"ConfigEntry", 'String'>
  readonly value: Prisma.FieldRef<"ConfigEntry", 'String'>
  readonly type: Prisma.FieldRef<"ConfigEntry", 'ConfigValueType'>
}
    

// Custom InputTypes
/**
 * ConfigEntry findUnique
 */
export type ConfigEntryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * Filter, which ConfigEntry to fetch.
   */
  where: Prisma.ConfigEntryWhereUniqueInput
}

/**
 * ConfigEntry findUniqueOrThrow
 */
export type ConfigEntryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * Filter, which ConfigEntry to fetch.
   */
  where: Prisma.ConfigEntryWhereUniqueInput
}

/**
 * ConfigEntry findFirst
 */
export type ConfigEntryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * Filter, which ConfigEntry to fetch.
   */
  where?: Prisma.ConfigEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigEntries to fetch.
   */
  orderBy?: Prisma.ConfigEntryOrderByWithRelationInput | Prisma.ConfigEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConfigEntries.
   */
  cursor?: Prisma.ConfigEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConfigEntries.
   */
  distinct?: Prisma.ConfigEntryScalarFieldEnum | Prisma.ConfigEntryScalarFieldEnum[]
}

/**
 * ConfigEntry findFirstOrThrow
 */
export type ConfigEntryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * Filter, which ConfigEntry to fetch.
   */
  where?: Prisma.ConfigEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigEntries to fetch.
   */
  orderBy?: Prisma.ConfigEntryOrderByWithRelationInput | Prisma.ConfigEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ConfigEntries.
   */
  cursor?: Prisma.ConfigEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigEntries.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ConfigEntries.
   */
  distinct?: Prisma.ConfigEntryScalarFieldEnum | Prisma.ConfigEntryScalarFieldEnum[]
}

/**
 * ConfigEntry findMany
 */
export type ConfigEntryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * Filter, which ConfigEntries to fetch.
   */
  where?: Prisma.ConfigEntryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ConfigEntries to fetch.
   */
  orderBy?: Prisma.ConfigEntryOrderByWithRelationInput | Prisma.ConfigEntryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ConfigEntries.
   */
  cursor?: Prisma.ConfigEntryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ConfigEntries from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ConfigEntries.
   */
  skip?: number
  distinct?: Prisma.ConfigEntryScalarFieldEnum | Prisma.ConfigEntryScalarFieldEnum[]
}

/**
 * ConfigEntry create
 */
export type ConfigEntryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * The data needed to create a ConfigEntry.
   */
  data: Prisma.XOR<Prisma.ConfigEntryCreateInput, Prisma.ConfigEntryUncheckedCreateInput>
}

/**
 * ConfigEntry createMany
 */
export type ConfigEntryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ConfigEntries.
   */
  data: Prisma.ConfigEntryCreateManyInput | Prisma.ConfigEntryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConfigEntry createManyAndReturn
 */
export type ConfigEntryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * The data used to create many ConfigEntries.
   */
  data: Prisma.ConfigEntryCreateManyInput | Prisma.ConfigEntryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ConfigEntry update
 */
export type ConfigEntryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * The data needed to update a ConfigEntry.
   */
  data: Prisma.XOR<Prisma.ConfigEntryUpdateInput, Prisma.ConfigEntryUncheckedUpdateInput>
  /**
   * Choose, which ConfigEntry to update.
   */
  where: Prisma.ConfigEntryWhereUniqueInput
}

/**
 * ConfigEntry updateMany
 */
export type ConfigEntryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ConfigEntries.
   */
  data: Prisma.XOR<Prisma.ConfigEntryUpdateManyMutationInput, Prisma.ConfigEntryUncheckedUpdateManyInput>
  /**
   * Filter which ConfigEntries to update
   */
  where?: Prisma.ConfigEntryWhereInput
  /**
   * Limit how many ConfigEntries to update.
   */
  limit?: number
}

/**
 * ConfigEntry updateManyAndReturn
 */
export type ConfigEntryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * The data used to update ConfigEntries.
   */
  data: Prisma.XOR<Prisma.ConfigEntryUpdateManyMutationInput, Prisma.ConfigEntryUncheckedUpdateManyInput>
  /**
   * Filter which ConfigEntries to update
   */
  where?: Prisma.ConfigEntryWhereInput
  /**
   * Limit how many ConfigEntries to update.
   */
  limit?: number
}

/**
 * ConfigEntry upsert
 */
export type ConfigEntryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * The filter to search for the ConfigEntry to update in case it exists.
   */
  where: Prisma.ConfigEntryWhereUniqueInput
  /**
   * In case the ConfigEntry found by the `where` argument doesn't exist, create a new ConfigEntry with this data.
   */
  create: Prisma.XOR<Prisma.ConfigEntryCreateInput, Prisma.ConfigEntryUncheckedCreateInput>
  /**
   * In case the ConfigEntry was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ConfigEntryUpdateInput, Prisma.ConfigEntryUncheckedUpdateInput>
}

/**
 * ConfigEntry delete
 */
export type ConfigEntryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
  /**
   * Filter which ConfigEntry to delete.
   */
  where: Prisma.ConfigEntryWhereUniqueInput
}

/**
 * ConfigEntry deleteMany
 */
export type ConfigEntryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ConfigEntries to delete
   */
  where?: Prisma.ConfigEntryWhereInput
  /**
   * Limit how many ConfigEntries to delete.
   */
  limit?: number
}

/**
 * ConfigEntry without action
 */
export type ConfigEntryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ConfigEntry
   */
  select?: Prisma.ConfigEntrySelect<ExtArgs> | null
  /**
   * Omit specific fields from the ConfigEntry
   */
  omit?: Prisma.ConfigEntryOmit<ExtArgs> | null
}
